package barcode

import (
	"fmt"
	"strings"
)

func barcodeCode39(code string) (string, error) {

	patterns := map[rune]string{
		'0': "111331311", '1': "311311113", '2': "113311113", '3': "313311111", '4': "111331113",
		'5': "311331111", '6': "113331111", '7': "111311313", '8': "311311311", '9': "113311311",
		'A': "311113113", 'B': "113113113", 'C': "313113111", 'D': "111133113", 'E': "311133111",
		'F': "113133111", 'G': "111113313", 'H': "311113311", 'I': "113113311", 'J': "111133311",
		'K': "311111133", 'L': "113111133", 'M': "313111131", 'N': "111131133", 'O': "311131131",
		'P': "113131131", 'Q': "111111333", 'R': "311111331", 'S': "113111331", 'T': "111131331",
		'U': "331111113", 'V': "133111113", 'W': "333111111", 'X': "131131113", 'Y': "331131111",
		'Z': "133131111", '-': "131111313", '.': "331111311", ' ': "133111311", '$': "131313111",
		'/': "131311131", '+': "131113131", '%': "111313131", '*': "131131311",
	}

	code = strings.TrimPrefix(code, "*")
	code = strings.TrimSuffix(code, "*")
	if code == "" {
		return "", fmt.Errorf("empty code")
	}
	code = "*" + code + "*"
	barpattern := ""
	for k, r := range code {
		p := patterns[r]
		if p == "" {
			return "", fmt.Errorf("invalid char %c", r)
		}
		if k > 0 {
			barpattern += "1"
		}
		barpattern += p
	}
	return barpattern, nil
}
